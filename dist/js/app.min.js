/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// import * as webpFn from \"./modules/fn.js\";\r\n\r\n// webpFn.isWebp();\r\nconst canvas = document.getElementById(\"gameCanvas\");\r\nconst ctx = canvas.getContext(\"2d\");\r\n\r\nconst ground = new Image();\r\nground.src = \"./img/A7_no.png\";\r\nconst foodImg = new Image();\r\nfoodImg.src = \"./img/1760351_dessert_donut_food_sweet_icon.png\";\r\nconst headImg = new Image();\r\nheadImg.src = \"./img/snake_2469829.png\";\r\n\r\nconst box = 32;\r\nlet score = 0;\r\nlet food = createFood();\r\n\r\nlet snake = [{ x: 9 * box, y: 10 * box }];\r\n\r\ndocument.addEventListener(\"keydown\", direction);\r\nlet dir;\r\n\r\nlet speed = 200; // Начальная скорость движения змейки (в миллисекундах)\r\nlet lastUpdateTime = 0;\r\n\r\nfunction createFood() {\r\n  return {\r\n    x: Math.floor(Math.random() * 17 + 1) * box,\r\n    y: Math.floor(Math.random() * 15 + 3) * box,\r\n  };\r\n}\r\n\r\nfunction direction(event) {\r\n  if (event.keyCode === 37 && dir !== \"right\") {\r\n    dir = \"left\";\r\n  } else if (event.keyCode === 38 && dir !== \"down\") {\r\n    dir = \"up\";\r\n  } else if (event.keyCode === 39 && dir !== \"left\") {\r\n    dir = \"right\";\r\n  } else if (event.keyCode === 40 && dir !== \"up\") {\r\n    dir = \"down\";\r\n  }\r\n}\r\n\r\nfunction endGame() {\r\n  cancelAnimationFrame(game);\r\n  // Здесь можно добавить код для отображения сообщения о конце игры или перезапуска игры.\r\n}\r\n\r\nfunction drawHead(x, y) {\r\n  ctx.save();\r\n  ctx.translate(x + box / 2, y + box / 2);\r\n\r\n  if (dir === \"left\") {\r\n    ctx.rotate(Math.PI / 2);\r\n  } else if (dir === \"right\") {\r\n    ctx.rotate(-Math.PI / 2);\r\n  } else if (dir === \"up\") {\r\n    ctx.rotate(-Math.PI);\r\n  }\r\n\r\n  ctx.drawImage(headImg, -box / 2, -box / 2, box, box);\r\n  ctx.restore();\r\n}\r\n\r\nfunction drawGame(currentTime) {\r\n  const deltaTime = currentTime - lastUpdateTime;\r\n\r\n  if (deltaTime > speed) {\r\n    ctx.drawImage(ground, 0, 0);\r\n    ctx.drawImage(foodImg, food.x, food.y);\r\n\r\n    for (let i = 0; i < snake.length; i++) {\r\n      if (i === 0) {\r\n        drawHead(snake[i].x, snake[i].y);\r\n      } else {\r\n        ctx.fillStyle = `hsl(${Math.random() * 40}, 100%, 50%)`;\r\n        ctx.beginPath();\r\n        ctx.arc(\r\n          snake[i].x + box / 2,\r\n          snake[i].y + box / 2,\r\n          box / 2,\r\n          0,\r\n          Math.PI * 2\r\n        );\r\n        ctx.fill();\r\n      }\r\n    }\r\n\r\n    ctx.fillStyle = \"white\";\r\n    ctx.font = \"50px Arial\";\r\n    ctx.fillText(score, box * 2.5, box * 1.7);\r\n\r\n    let snakeX = snake[0].x;\r\n    let snakeY = snake[0].y;\r\n\r\n    if (snakeX === food.x && snakeY === food.y) {\r\n      score++;\r\n      food = createFood();\r\n    } else {\r\n      snake.pop();\r\n    }\r\n\r\n    if (\r\n      snakeX < box ||\r\n      snakeX > box * 17 ||\r\n      snakeY < 3 * box ||\r\n      snakeY > box * 17\r\n    ) {\r\n      endGame();\r\n    }\r\n\r\n    if (dir === \"left\") snakeX -= box;\r\n    if (dir === \"right\") snakeX += box;\r\n    if (dir === \"up\") snakeY -= box;\r\n    if (dir === \"down\") snakeY += box;\r\n\r\n    let newHead = { x: snakeX, y: snakeY };\r\n\r\n    eatTail(newHead, snake);\r\n\r\n    snake.unshift(newHead);\r\n\r\n    lastUpdateTime = currentTime;\r\n  }\r\n\r\n  if (!endGameConditionMet()) {\r\n    requestAnimationFrame(drawGame);\r\n  }\r\n}\r\n\r\nfunction eatTail(head, arr) {\r\n  for (let i = 0; i < arr.length; i++) {\r\n    if (head.x === arr[i].x && head.y === arr[i].y) {\r\n      endGame();\r\n    }\r\n  }\r\n}\r\n\r\nfunction endGameConditionMet() {\r\n  let snakeX = snake[0].x;\r\n  let snakeY = snake[0].y;\r\n\r\n  return (\r\n    snakeX < box || snakeX > box * 17 || snakeY < 3 * box || snakeY > box * 17\r\n  );\r\n}\r\n\r\n// Запуск игры\r\nrequestAnimationFrame(drawGame);\r\n\n\n//# sourceURL=webpack://gulp/./src/js/app.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/app.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;